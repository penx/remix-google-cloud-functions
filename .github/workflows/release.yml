name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: Release or prerelease
        required: true
        default: prerelease
        options:
          - prerelease
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout main
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0

    - name: Get Node version
      id: node_version
      run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '${{ steps.node_version.outputs.NVMRC }}'
        registry-url: 'https://registry.npmjs.org'

    - name: Apply version
      run: |
        if [ "${{ inputs.release_type }}" == "prerelease" ]; then
          yarn version apply --all --prerelease
        else
          yarn version apply --all
        fi

    - name: Get version number
      working-directory: remix-google-cloud-functions
      id: version
      run: echo "version=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT

    - name: Get new branch name
      working-directory: remix-google-cloud-functions
      id: branch
      run: echo "name=releases/v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions@github.com"
        git config --local user.name "GitHub Actions"
        git add -A
        if [ -z "$(git status --porcelain)" ]; then
          echo "No changes"
          exit 0
        fi
        git checkout -b ${{ steps.branch.outputs.name }}
        git commit -m "Release ${{ steps.version.outputs.version }}"
        git push --set-upstream origin ${{ steps.branch.outputs.name }}
        gh pr create -f -l release
        if [ "${{ inputs.release_type }}" == "prerelease" ]; then
          gh release create v${{ steps.version.outputs.version }} --generate-notes --draft --target-branch ${{ steps.branch.outputs.name }} --prerelease
        else
          gh release create v${{ steps.version.outputs.version }} --generate-notes --draft --target-branch ${{ steps.branch.outputs.name }}
        fi  
